%Figure
% first figure will probably be some sort of methods figure
%fig 2 will likely be raw data - either like your 2015 paper or perhaps
%Irene's Fig 1
%maybe there would be a panel for metrics like acceleration - put shading
%around them - actually see explanation below I like that better
%make sure Claudia does table and age/gender stats

%don't forget your controls
%10 and 15 min poststim
%flex-ex
%diff freq's not just beta
%looking at hold and prep
%looking at rest periods






% I used this function to look at raw data traces for each subject from gen2 and gen3 side by
% side - appear to be the same so I will use gen3 for now
%% BEFORE DECIDING ON FIG 2, I WOULD GO THROUGH THIS ONE MORE TIME AND LOOK
%% THROUGH ALL SUBJECTS AGAIN - JUST DO A FOR LOOP AND PLOT THEM ALL AT ONE
%% TIME
sbj=['03';'04';'05';'42';'43']
for i=1:5
step_01_nr_eeg_anal_sum_01_data_vis_01('15')
end
43,13,17
22 for stim very nice
    20 for nonstim nice
%Next i plotted gen 3 beside .fig generated by allen's script
%just commented out the gen 2 code and added open .fig code

step_01_nr_eeg_anal_sum_01_data_vis_01('15')


% Next i will recreate allen's figure and statistics for the metrics

could plot all 12 acceleration curves then an average
then below that curves for all 4 phases
then could plot this for the 2 cs stim patients
then perhaps for all 4 groups then show overall line plots with stats





% fig 1 
% methods fig - I would show still shots of the video
% fig 2
% task in detail
% %fig 3
%I would say maybe the eeg here
% show raw data of stim - need to show REALLY CLEAN example
% then one of nonstim



%I believe this is subject3 - this is vel+accel
figure; hold on
subplot(2,2,1)
hold on
plot(trialData.vr(1).tracker.p.right(1700:2100,1))
plot(trialData.vr(1).tracker.v.right(1700:2100,1))
plot(trialData.vr(1).tracker.a.right(1700:2100,1))
title('prestim')

subplot(2,2,2)
hold on
plot(trialData.vr(2).tracker.p.right(650:1000,1))
plot(trialData.vr(2).tracker.v.right(650:1000,1))
plot(trialData.vr(2).tracker.a.right(650:1000,1))
title('intra5')

subplot(2,2,3)
hold on
plot(trialData.vr(3).tracker.p.right(950:1250,1)*-1)
plot(trialData.vr(3).tracker.v.right(950:1250,1)*-1)
plot(trialData.vr(3).tracker.a.right(950:1250,1)*-1)
title('intra15*-1')

subplot(2,2,4)
hold on
plot(trialData.vr(4).tracker.p.right(1000:1300,1))
plot(trialData.vr(4).tracker.v.right(1000:1300,1))
plot(trialData.vr(4).tracker.a.right(1000:1300,1))
title('post5')
load('~/nr_data_analysis/data_analyzed/eeg/gen_03/data/pro00087153_0003/analysis/S2-metrics/pro00087153_0003_S2-Metrics.mat')
% 
mean(metricdatraw.data{1,5}(:,1))
mean(metricdatraw.data{1,5}(:,2))
mean(metricdatraw.data{1,5}(:,3))
mean(metricdatraw.data{1,5}(:,4))
%confirmed these are the same between the metricdatraw variable 
%with the individual reaches and the metricdat variable with the 
%averages, let me spot check one more
load('~/nr_data_analysis/data_analyzed/eeg/gen_03/data/pro00087153_0020/analysis/S2-metrics/pro00087153_0020_S2-Metrics.mat')
mean(metricdatraw.data{1,9}(:,1))
mean(metricdatraw.data{1,9}(:,2))
mean(metricdatraw.data{1,9}(:,3))
mean(metricdatraw.data{1,9}(:,4))
%confirmed, now I will plot individual


%I checked this plot against Allen's stroke individual.jpg plot and it
%looks the same
%also checked hc, those look good as well

%just checking to make sure bl,es,ls and ps are indices 1-4
sbjs='30'%went through each subject 1 by 1
eval(['load(''~/nr_data_analysis/data_analyzed/eeg/gen_03/data/pro00087153_00',sbjs,'/analysis/S2-metrics/pro00087153_00',sbjs,'_S2-Metrics.mat'')'])
trialData.sessioninfo.trialnames
%metricdat.data{1,2}
clear
%looks good, now time to generate the grp plots




%now let's try some stats

grps=['cs_stm';'cs_non';'hc_stm';'hc_non']
for i=1:4
    for j=1%:13
        eval(['[p_',grps(i,:),'_kin',num2str(j),',tbl_',grps(i,:),'_kin',num2str(j),...
            ',stats_',grps(i,:),'_kin',num2str(j),']=anova1(',grps(i,:),'_kin',num2str(j),')'])
    end
end
%ok tried cs_non_kin1 and anova1 agrees with graphpad
%let me quickly test if the individual values give same p value

ind=[1:12;13:24;25:36;37:48;49:60]'
sbjs_cs_stm=['03';'04';'05';'42';'43']
for i=1:5
    eval(['load(''~/nr_data_analysis/data_analyzed/eeg/gen_03/data/pro00087153_00',sbjs_cs_stm(i,:),'/analysis/S2-metrics/pro00087153_00',sbjs_cs_stm(i,:),'_S2-Metrics.mat'')'])
    for j=1:4
        all_cs_stm_kin1(ind(:,i),j)=metricdatraw.data{1,1}(:,j)
    end
    clear t* s2* move* metric*
end

group=['1';'1';'1';'1';'1';'1';'1';'1';'1';'1';'1';'1';
       '2';'2';'2';'2';'2';'2';'2';'2';'2';'2';'2';'2';
       '3';'3';'3';'3';'3';'3';'3';'3';'3';'3';'3';'3';
       '4';'4';'4';'4';'4';'4';'4';'4';'4';'4';'4';'4';
       '5';'5';'5';'5';'5';'5';'5';'5';'5';'5';'5';'5']
   grp_col=['1';'2';'3';'4']
    [a1,a2,a3]=anova1(all_cs_stm_kin1,grp_col)
    
    
    %want to figure out why these have diff p-values
    %let's plot
    grp_mean=mean(cs_stm_kin1)
    grp_se=std(cs_stm_kin1)/sqrt(5)
    
    all_mean=mean(all_cs_stm_kin1)
    all_se=std(all_cs_stm_kin1)/sqrt(60)
    
    figure
    subplot(1,2,1); hold on
    bar(grp_mean)
    errorbar(grp_mean,grp_se)
        
    subplot(1,2,2); hold on
    bar(all_mean)
    errorbar(all_mean,all_se)
    set(gca,'ylim',[0 1])
    %the means are exactly the same but the different p-values 
    %are probably just a result of the much smaller std/se
    %for now we should go with the mean for each individual
    %or n=5
    
    grps=['cs_stm';'cs_non';'hc_stm';'hc_non']
for i=1:4
    for j=1:13
        eval(['[p2_',grps(i,:),'_kin',num2str(j),',tbl2_',grps(i,:),'_kin',num2str(j),...
            ',stats2_',grps(i,:),'_kin',num2str(j),']=friedman(',grps(i,:),'_kin',num2str(j),')'])
    end
end
%ok I spot checked a bunch of these in graphpad and though the
%the p-values weren't exact, they were relative, meaning when
% a p-value was high in matlab it was also high in graphpad and
%and vice versa

%now for multiple comparisons

fdr_cs_non=[p2_cs_non_kin1;
    p2_cs_non_kin10;
    p2_cs_non_kin11;
    p2_cs_non_kin12;
    p2_cs_non_kin13;
    p2_cs_non_kin2;
    p2_cs_non_kin3;
    p2_cs_non_kin4;
    p2_cs_non_kin5;
    p2_cs_non_kin6;
    p2_cs_non_kin7;
    p2_cs_non_kin8;
    p2_cs_non_kin9]
fdr_cs_stm=[p2_cs_stm_kin1;
    p2_cs_stm_kin10;
    p2_cs_stm_kin11;
    p2_cs_stm_kin12;
    p2_cs_stm_kin13;
    p2_cs_stm_kin2;
    p2_cs_stm_kin3;
    p2_cs_stm_kin4;
    p2_cs_stm_kin5;
    p2_cs_stm_kin6;
    p2_cs_stm_kin7;
    p2_cs_stm_kin8;
    p2_cs_stm_kin9]
fdr_hc_non=[p2_hc_non_kin1;
    p2_hc_non_kin10;
    p2_hc_non_kin11;
    p2_hc_non_kin12;
    p2_hc_non_kin13;
    p2_hc_non_kin2;
    p2_hc_non_kin3;
    p2_hc_non_kin4;
    p2_hc_non_kin5;
    p2_hc_non_kin6;
    p2_hc_non_kin7;
    p2_hc_non_kin8;
    p2_hc_non_kin9]
fdr_hc_stm=[p2_hc_stm_kin1;
    p2_hc_stm_kin10;
    p2_hc_stm_kin11;
    p2_hc_stm_kin12;
    p2_hc_stm_kin13;
    p2_hc_stm_kin2;
    p2_hc_stm_kin3;
    p2_hc_stm_kin4;
    p2_hc_stm_kin5;
    p2_hc_stm_kin6;
    p2_hc_stm_kin7;
    p2_hc_stm_kin8;
    p2_hc_stm_kin9]
fdr_all_cs_non=mafdr(fdr_cs_non)
fdr_all_cs_stm=mafdr(fdr_cs_stm)
fdr_all_hc_non=mafdr(fdr_hc_non)
fdr_all_hc_stm=mafdr(fdr_hc_stm)
%0.05/13 = 0.0038 

%okay I think we have our stats
%cs stm has lots more corrected sig values than other groups
%most related to movement speed
    
cs_kin9_all=[cs_non_kin9;cs_stm_kin9]

[a,b,c]=anova2(cs_kin9_all,5)
[a,b,c]=anova2([cs_non_kin10';cs_stm_kin10'],4)
sbj='03'


        